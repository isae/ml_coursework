var colors = {
   0 : "red",
   1 : "green",
   2 : "ivory",
   3 : "yellow",
   4 : "blue"
}

var nationalities = {
   0 : "england",
   1 : "spain",
   2 : "ukraine",
   3 : "norway",
   4 : "japan"
}

var pets = {
    0 : "dog",
    1 : "snail",
    2 : "fox",
    3 : "horse",
    4 : "zebra"
}

var cigarettes = {
    0 : "old_gold",
    1 : "kools",
    2 : "chesterfield",
    3 : "lucky_strike",
    4 : "parliament"
}

var drinks = {
    0 : "coffee",
    1 : "tea",
    2 : "milk",
    3 : "juice",
    4 : "water"
}

var mustBe = function(whenApplicable, toCheck){
    return whenApplicable == toCheck
}

var getOne = function(){
    return sample(RandomInteger({n: 5}))
}

var getHouse = function(house, color, nat, drink, cig, pet){
    return {
        "house" : house,
        "color" : color,
        "nat"   : nat,
        "drink" : drink,
        "cig"   : cig,
        "pet"   : pet
    }
}

var toStr = function(obj){
    return "("+obj["house"] + ", "+ obj["color"]+", "+ obj["nat"]+", "+obj["drink"]+", "+ obj["cig"] + ", "+ obj["pet"]+")"
}

var applyCommonConditions = function(house, color, nat, drink, cig, pet){
  // 2. The Englishman lives in the red house.
  condition(mustBe(nat == "england", color == "red"))
  // 3. The Spaniard owns a dog.
  condition(mustBe(nat == "spain", pet == "dog"))
  // 4. Coffee is drunk in the green house.
  condition(mustBe(drink == "coffee", color == "green"))
  // 5. The Ukrainian drinks tea.
  condition(mustBe(nat == "ukraine", drink == "tea"))
  // 7. The Old Gold smoker owns snails.
  condition(mustBe(cig == "old_gold", pet == "snail"))
  // 8. Kools are being smoked in the yellow house.
  condition(mustBe(cig == "kools", color == "yellow"))
  //  9. Milk is drunk in the middle house.
  condition(mustBe(house == 2, drink == "milk"))
  // 10. The Norwegian lives in the first house on the left.
  condition(mustBe(house == 0, nat == "norway"))
  // 13. The Lucky Strike smoker drinks orange juice.
  condition(mustBe(cig == "lucky_strike", drink == "juice"))
  // 14. The Japanese smokes Parliaments.
  condition(mustBe(nat == "japan", cig == "parliament"))
}

var getHouseDistrib = function(house){
    return Infer(function () {
      /* 1. There are five houses in a row, each of a different color
         and inhabited by men of different nationalities,
         with different pets, drinks, and cigarettes. */
      var color = colors[getOne()]
      var nat = nationalities[getOne()]
      var pet = pets[getOne()]
      var cig = cigarettes[getOne()]
      var drink = drinks[getOne()]
      applyCommonConditions(house, color, nat, drink, cig, pet)
      return getHouse(house, color, nat, drink, cig, pet)
    })
}

var house0Distrib = getHouseDistrib(0)
var house1Distrib = getHouseDistrib(1)
var house2Distrib = getHouseDistrib(2)
var house3Distrib = getHouseDistrib(3)
var house4Distrib = getHouseDistrib(4)

var toTheLeft = function(houses, i, thisToCheck, leftToCheck){
    if(i == 0){
        return false
    }
    if(thisToCheck(houses[i])){
        return leftToCheck(houses[i-1])
    }
    return true
}

var toTheRight = function(houses, i, thisToCheck, rightToCheck){
    if(i == 4){
        return false
    }
    if(thisToCheck(houses[i])){
        return rightToCheck(houses[i+1])
    }
    return true
}

var nextTo = function(houses, i, thisToCheck, neighborToCheck){
    return toTheLeft(houses, i, thisToCheck, neighborToCheck) || toTheRight(houses, i, thisToCheck, neighborToCheck)
}

var orderConditions = function(houses){
    var checker = function(i, unused) {
        return toTheRight(houses, i, function(hs) { return hs["color"] == "ivory"; }, function(hs) { return hs["color"] == "green"; })
        && nextTo(houses, i, function(hs) { return hs["cig"] == "chesterfield"; }, function(hs) { return hs["pet"] == "fox"; })
        && nextTo(houses, i, function(hs) { return hs["cig"] == "kools"; }, function(hs) { return hs["pet"] == "horse"; })
        && nextTo(houses, i, function(hs) { return hs["nat"] == "norway"; }, function(hs) { return hs["color"] == "blue"; })
    };
    var okHouses = mapIndexed(checker, houses)
    display(okHouses)
    return any(function(bool) { return bool == false; }, okHouses);
}

var orderCheckDistrib = Infer(function () {
      var houses = [
        sample(house0Distrib),
        sample(house1Distrib),
        sample(house2Distrib),
        sample(house3Distrib),
        sample(house4Distrib)
      ]
      condition(orderConditions(houses))
      return JSON.stringify(houses)
})

viz(orderCheckDistrib)